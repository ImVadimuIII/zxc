import os

from telebot import types

# Sta≈Çe i konfiguracje
CHANNEL_USERNAME = "@podvalHimikov"
user_last_message = {}
user_subscription_status = {}
user_states = {}

def setup_handlers(bot):
    """
    Funkcja inicjalizujƒÖca handlery dla bota.
    """

    def is_subscribed(user_id):
        """Sprawdza, czy u≈ºytkownik jest subskrybentem kana≈Çu."""
        try:
            member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
            return member.status in ["member", "administrator", "creator"]
        except Exception:
            return False

    def delete_last_message(chat_id):
        """Usuwa ostatniƒÖ wiadomo≈õƒá wys≈ÇanƒÖ przez bota do u≈ºytkownika."""
        if chat_id in user_last_message:
            try:
                bot.delete_message(chat_id, user_last_message[chat_id])
            except Exception:
                pass

    def send_and_track_message(chat_id, text, reply_markup=None, parse_mode=None):
        """Wysy≈Ça wiadomo≈õƒá i zapisuje jej ID, aby p√≥≈∫niej mo≈ºna by≈Ço jƒÖ usunƒÖƒá."""
        delete_last_message(chat_id)
        sent_message = bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode=parse_mode)
        user_last_message[chat_id] = sent_message.message_id

    def add_back_button(callback_data="back_to_main"):
        """Tworzy przycisk powrotu."""
        markup = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_data)
        markup.add(back_button)
        return markup

    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        """Obs≈Çuguje komendƒô /start."""
        if message.from_user.id in user_subscription_status and user_subscription_status[message.from_user.id]:
            show_main_menu(message)
        else:
            markup = types.InlineKeyboardMarkup()
            subscribe_button = types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")
            check_subscription_button = types.InlineKeyboardButton("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")
            markup.add(subscribe_button, check_subscription_button)
            send_and_track_message(
                message.chat.id,
                "–ü—Ä–∏–≤–µ—Ç –¥—Ä—É–∂–∏—â–µ! –ß—Ç–æ–±—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º, —Ç—ã –¥–æ–ª–∂–µ–Ω –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤.",
                reply_markup=markup
            )

    @bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
    def check_subscription(call):
        """Sprawdza status subskrypcji u≈ºytkownika."""
        if is_subscribed(call.from_user.id):
            user_subscription_status[call.from_user.id] = True
            bot.answer_callback_query(call.id, "–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
            show_main_menu(call.message)
        else:
            user_subscription_status[call.from_user.id] = False
            bot.answer_callback_query(call.id, "–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!", show_alert=True)
            send_welcome(call.message)

    def show_main_menu(message):
        """Wy≈õwietla menu g≈Ç√≥wne."""
        if not is_subscribed(message.chat.id):
            user_subscription_status[message.chat.id] = False
            send_welcome(message)
            return

        user_subscription_status[message.chat.id] = True
        markup = types.InlineKeyboardMarkup()
        row1 = [
            types.InlineKeyboardButton("üèÜÔ∏è –ü–∞—É—Ä–ª–∏—Ñ—Ç–∏–Ω–≥ –∏ —Å–∏–ª–æ–≤—ã–µ", callback_data="–ü–∞—É—Ä–ª–∏—Ñ—Ç–∏–Ω–≥ –∏ —Å–∏–ª–æ–≤—ã–µ")
        ]
        row2 = [
            types.InlineKeyboardButton("üéæ –†–∞–Ω–¥–æ–º–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="–†–∞–Ω–¥–æ–º–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"),
            types.InlineKeyboardButton("üèãÔ∏è‚Äç‚ôÇÔ∏è –ë–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥", callback_data="–ë–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥")
        ]
        row3 = [
            types.InlineKeyboardButton("üë§ –ê–≤—Ç–æ—Ä—ã", callback_data="–ê–≤—Ç–æ—Ä—ã"),
            types.InlineKeyboardButton("üìñ –ì–∞–π–¥—ã", callback_data="–ì–∞–π–¥—ã")
        ]
        markup.row(*row1)
        markup.row(*row2)
        markup.row(*row3)
        send_and_track_message(
            message.chat.id,
            "‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–µ–±—è –∏ –Ω–µ –ø–ª–∞—Ç–∏—Ç—å –Ω–∏ –∫–æ–ø–µ–π–∫–∏!",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
    def back_to_main_menu(call):
        """Obs≈Çuguje powr√≥t do menu g≈Ç√≥wnego."""
        bot.answer_callback_query(call.id)
        show_main_menu(call.message)

    @bot.callback_query_handler(func=lambda call: call.data in [
        "–ü–∞—É—Ä–ª–∏—Ñ—Ç–∏–Ω–≥ –∏ —Å–∏–ª–æ–≤—ã–µ", "–ë–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥", "–†–∞–Ω–¥–æ–º–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "–ê–≤—Ç–æ—Ä—ã", "–ì–∞–π–¥—ã",
        "–ù–∞—á–∞–ª—å–Ω—ã–π", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π", "–ñ–∏–º–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏", "–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞",
        "–°—Ç–∞–∂_1", "–°—Ç–∞–∂_2", "–°—Ç–∞–∂_3"
    ])
    def handle_callback(call):
        """Obs≈Çuguje r√≥≈ºne callbacki z menu."""
        if not is_subscribed(call.from_user.id):
            user_subscription_status[call.from_user.id] = False
            send_welcome(call.message)
            return

        elif call.data == "–ë–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥":
            bot.answer_callback_query(call.id)  # Potwierdzenie callbacka
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data="–ú—É–∂—á–∏–Ω–∞"),
                types.InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="–ñ–µ–Ω—â–∏–Ω–∞")
            )
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            send_and_track_message(
                call.message.chat.id,
                "üí™ –ë–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥\n\n[–ø—Ä–æ—á—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º!](https://telegra.ph/Instrukciya-k-programmam-bb-11-01) ‚Äî –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:",
                reply_markup=markup,
                parse_mode="Markdown"
            )

        # Obs≈Çuga wyboru p≈Çci, sta≈ºu i programu
        @bot.callback_query_handler(
            func=lambda call: call.data in ["–ñ–µ–Ω—â–∏–Ω–∞", "–ú—É–∂—á–∏–Ω–∞", "–°—Ç–∞–∂_1", "–°—Ç–∞–∂_2", "–°—Ç–∞–∂_3", "2x2", "3day"]
        )
        def handle_callback(call):
            user_id = call.message.chat.id
            user_states.setdefault(user_id, {})

            # Obs≈Çuga wyboru p≈Çci
            if call.data in ["–ñ–µ–Ω—â–∏–Ω–∞", "–ú—É–∂—á–∏–Ω–∞"]:
                user_states[user_id]["gender"] = call.data
                bot.answer_callback_query(call.id)
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("–°—Ç–∞–∂ 0-6 –º–µ—Å", callback_data="–°—Ç–∞–∂_1"),
                    types.InlineKeyboardButton("–°—Ç–∞–∂ 1-3 –≥–æ–¥–∞", callback_data="–°—Ç–∞–∂_2"),
                    types.InlineKeyboardButton("–°—Ç–∞–∂ 3+ –ª–µ—Ç", callback_data="–°—Ç–∞–∂_3")
                )
                markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
                bot.edit_message_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å—Ç–∞–∂ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=markup
                )


            # Obs≈Çuga wyboru sta≈ºu
            elif call.data in ["–°—Ç–∞–∂_1", "–°—Ç–∞–∂_2", "–°—Ç–∞–∂_3"]:
                user_states[user_id]["stage"] = call.data
                bot.answer_callback_query(call.id)
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("2x2", callback_data="2x2"),
                    types.InlineKeyboardButton("3 –¥–Ω—è", callback_data="3day"),
                )
                markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
                bot.edit_message_text(
                    "üí™üèª –ë–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥: \n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫:",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=markup
                )


            # Obs≈Çuga wyboru programu
            elif call.data in ["2x2", "3day"]:
                user_states[user_id]["program"] = call.data
                bot.answer_callback_query(call.id)
                gender = user_states[user_id].get("gender")
                stage = user_states[user_id].get("stage")
                program = user_states[user_id].get("program")

                # Generowanie ≈õcie≈ºki pliku na podstawie wybor√≥w u≈ºytkownika
                file_mapping = {
                    ("–ú—É–∂—á–∏–Ω–∞", "–°—Ç–∞–∂_1", "2x2"): "workouts/–ú—É–∂—Å–∫–æ–π –Ω–∞—á–∞–ª—å–Ω—ã–π 2—Ö2.xlsx",
                    ("–ú—É–∂—á–∏–Ω–∞", "–°—Ç–∞–∂_1", "3day"): "workouts/–ú—É–∂—Å–∫–æ–π –Ω–∞—á–∞–ª—å–Ω—ã–π 3 –¥–Ω—è.xlsx",
                    ("–ñ–µ–Ω—â–∏–Ω–∞", "–°—Ç–∞–∂_1", "2x2"): "workouts/–ñ–µ–Ω—Å–∫–∏–π –Ω–∞—á–∞–ª—å–Ω—ã–π 2—Ö2.xlsx",
                    ("–ñ–µ–Ω—â–∏–Ω–∞", "–°—Ç–∞–∂_1", "3day"): "workouts/–ñ–µ–Ω—Å–∫–∏–π –Ω–∞—á–∞–ª—å–Ω—ã–π 3 –¥–Ω—è.xlsx",

                    # Dodaj pozosta≈Çe kombinacje plik√≥w
                }

                file_path = file_mapping.get((gender, stage, program))

                if file_path:
                    with open(file_path, "rb") as file:
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
                        bot.send_document(
                            call.message.chat.id,
                            file,
                            caption=f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n\n–ü–æ–ª: {gender}, –°—Ç–∞–∂: {stage}, –ü—Ä–æ–≥—Ä–∞–º–º–∞: {program}",
                            reply_markup=markup
                        )

        if call.data == "–ê–≤—Ç–æ—Ä—ã":
            bot.answer_callback_query(call.id)
            markup = types.InlineKeyboardMarkup()
            row1 = [
                types.InlineKeyboardButton("üíô –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", url="https://t.me/podvalHimikov")
            ]
            row2 = [
                types.InlineKeyboardButton("üíõ –í–ª–∞–¥–µ–ª–µ—Ü", url="https://t.me/podvalHimikov")
            ]
            markup.row(*row1)
            markup.row(*row2)
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            send_and_track_message(
                call.message.chat.id,
                "‚ÑπÔ∏è –ê–≤—Ç–æ—Ä—ã \n\n–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ç—Ä–µ–Ω–µ—Ä–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–µ—Ä–æ–≤–æ–∫, –∞ —Ç–∞–∫–∂–µ –∫–æ–Ω—Ç–∞–∫—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞.",
                reply_markup=markup
            )

            # Paurlifting
        elif call.data == "–ü–∞—É—Ä–ª–∏—Ñ—Ç–∏–Ω–≥ –∏ —Å–∏–ª–æ–≤—ã–µ":
            bot.answer_callback_query(call.id)
            markup = types.InlineKeyboardMarkup()
            row1 = [
                types.InlineKeyboardButton("üü¢ –ù–∞—á–∞–ª—å–Ω—ã–π", callback_data="–ù–∞—á–∞–ª—å–Ω—ã–π"),
                types.InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="–°—Ä–µ–¥–Ω–∏–π")
            ]
            row2 = [
                types.InlineKeyboardButton("üî¥ –í—ã—Å–æ–∫–∏–π", callback_data="–í—ã—Å–æ–∫–∏–π"),
                types.InlineKeyboardButton("üìã –ñ–∏–º–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏", callback_data="–ñ–∏–º–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏")
            ]
            markup.row(*row1)
            markup.row(*row2)
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            send_and_track_message(
                call.message.chat.id,
                "üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–∞—É—Ä–ª–∏—Ñ—Ç–∏–Ω–≥ –∏ —Å–∏–ª–æ–≤—ã–µ\n\n‚Äî –û–±—Ä–∞—â–∞–µ–º –≤–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –º—É–∂—á–∏–Ω –∏ –∂–µ–Ω—â–∏–Ω. –í–Ω—É—Ç—Ä–∏ —Ñ–∞–π–ª–∞ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –µ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏. –ü—Ä–∏—è—Ç–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!",
                reply_markup=markup
            )

        # Action in paurlifting
        elif call.data == "–ù–∞—á–∞–ª—å–Ω—ã–π":
            with open("../workouts/–¶–∏–∫–ª –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.xlsx", "rb") as file:
                markup = add_back_button()
                bot.send_document(call.message.chat.id, file, caption="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n\n–£—Ä–æ–≤–µ–Ω—å: üü¢ –ù–∞—á–∞–ª—å–Ω—ã–π",
                                  reply_markup=markup)
        elif call.data == "–°—Ä–µ–¥–Ω–∏–π":
            with open("../workouts/–¶–∏–∫–ª –Ω–∞ 4 –¥–Ω—è –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è.xlsx", "rb") as file:
                markup = add_back_button()
                bot.send_document(call.message.chat.id, file, caption="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n\n–£—Ä–æ–≤–µ–Ω—å: üü° –°—Ä–µ–¥–Ω–∏–π",
                                  reply_markup=markup)
        elif call.data == "–í—ã—Å–æ–∫–∏–π":
            with open("../workouts/–õ–∏–Ω–µ–∏ÃÜ–Ω—ã–∏ÃÜ —Ü–∏–∫–ª –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö.xlsx", "rb") as file:
                markup = add_back_button()
                bot.send_document(call.message.chat.id, file, caption="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n\n–£—Ä–æ–≤–µ–Ω—å: üî¥ –í—ã—Å–æ–∫–∏–π",
                                  reply_markup=markup)
        elif call.data == "–ñ–∏–º–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏":
            with open("../workouts/bench_presses_article.docx", "rb") as file:
                markup = add_back_button()
                bot.send_document(call.message.chat.id, file, caption="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n\n–£—Ä–æ–≤–µ–Ω—å: –ñ–∏–º–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏",
                                  reply_markup=markup)
        else:
            bot.send_message(
                call.message.chat.id,
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä."
            )

    # Obs≈Çuga przycisku "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    @bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
    def go_back_to_main(call):
        bot.answer_callback_query(call.id)
        bot.edit_message_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", call.message.chat.id, call.message.message_id)

    # Gajdy
    @bot.callback_query_handler(func=lambda call: call.data == "–ì–∞–π–¥—ã")
    def handle_guides(call):
        bot.answer_callback_query(call.id)
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("üìï –ú–ê–°–°–û–ù–û–ë–û–†–ù–´–ô –ì–ê–ô–î", url="https://telegra.ph/Hh-06-01-10"))
        markup.row(
        types.InlineKeyboardButton("üìó –ì–ê–ô–î –ù–ê –†–ï–ö–û–ú–ü–û–ó–ò–¶–ò–Æ", url="https://telegra.ph/Rekompoziciya-sushka-12-09"))
        markup.row(types.InlineKeyboardButton("üìò –ü–†–û–ì–†–ï–°–° ‚Äì –≠–¢–û –ù–ï –°–ö–£–ß–ù–û", url="https://telegra.ph/Progress---ehto-ne-skuchno-s-07-09"))
        markup.row(types.InlineKeyboardButton("üìô –ò–ó–ë–ï–ì–ê–ï–ú –¢–†–ê–í–ú–´", url="https://telegra.ph/Testovyj-dokument-07-09"))
        markup.row(types.InlineKeyboardButton("üìí –°–ü–û–†–¢–ü–ò–¢", url="https://telegra.ph/Sport-pit-07-09"))
        markup.row(types.InlineKeyboardButton("üìÑ –ì–ê–ô–î –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ –ü–ò–©–ï–í–ê–†–ï–ù–ò–Ø", callback_data="guide_digestion"))
        markup.row(types.InlineKeyboardButton("üìì –û–ë–©–ï–°–¢–£–ü–ù–ê–Ø –†–ê–ó–ú–ò–ù–ö–ê", callback_data="guide_warmup"))
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        send_and_track_message(
            call.message.chat.id,
            "üìö –ì–∞–π–¥—ã\n\n–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≥–∞–π–¥—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é/—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏ –¥—Ä—É–≥–∏–µ.",
            reply_markup=markup
        )

    # Obs≈Çuga gajdu "digestive_health_article"
    @bot.callback_query_handler(func=lambda call: call.data == "guide_digestion")
    def handle_guide_digestion(call):
        if os.path.exists("../workouts/digestive_health_article.docx"):
            with open("../workouts/digestive_health_article.docx", "rb") as file:
                markup = add_back_button()
                bot.send_document(call.message.chat.id, file, reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "Plik nie zosta≈Ç znaleziony.")

    # Obs≈Çuga gajdu "joint_warm_up"
    @bot.callback_query_handler(func=lambda call: call.data == "guide_warmup")
    def handle_guide_warmup(call):
        if os.path.exists("../workouts/joint_warm_up.mp4"):
            with open("../workouts/joint_warm_up.mp4", "rb") as file:
                markup = add_back_button()
                bot.send_document(call.message.chat.id, file, reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "Plik nie zosta≈Ç znaleziony.")

    # Random training
    @bot.callback_query_handler(func=lambda call: call.data == "–†–∞–Ω–¥–æ–º–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
    def handle_random_training(call):
        bot.answer_callback_query(call.id)
        send_and_track_message(
            call.message.chat.id,
            "üéæ Soon...",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ),
            parse_mode="Markdown"
        )

    # Obs≈Çuga nieznanych danych
    @bot.callback_query_handler(func=lambda call: True)
    def handle_unknown_callback(call):
        print(f"Error: Unknown callback {call.data}")
